<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title>bhamblok</title>
		<link></link>
		<atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>When and why to use Ampersand.js</title>
        <description>&lt;p&gt;Building our project neoScores, we&#39;ve tackled a lot of problems in search for the ideal framework. The more frameworks we tried, the more often we started over again.&lt;/p&gt;

&lt;p&gt;In the beginning we were convinced that a full-featured CMS-framework could serve all our needs. Several months later we concluded that the only thing we were actually using of this open-sourced bulky system, was the user-management part of it. Everything else was custom build on top of this framework and ... unfortunately ... we had &lt;em&gt;&quot;vendor-locked&quot;&lt;/em&gt; ourselves.&lt;/p&gt;

&lt;p&gt;This blog talks about the bumpy road we&#39;ve taken to end up with something we realy love: &lt;a href=&quot;http://ampersandjs.com/&quot;&gt;Ampersand.js&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;What do we actually need from a framework?&lt;/h2&gt;

&lt;p&gt;We are working on a Web App which feels like a native app. Our app needs to run offline, so it would be nice if it runs like a single-page website, but then again, we need to show multiple different pages or views, preferably via a path change in the url. Further on, content needs to interact with user&#39;s input or should dynamically be generated via data coming from Object-models.&lt;/p&gt;

&lt;blockquote&gt;&lt;h3&gt;1. Multiple pages&lt;/h3&gt;

&lt;p&gt;The absolute core-task of our app is to open up different pages, or as it&#39;s called in the web-app-world: &lt;strong&gt;&lt;em&gt;views&lt;/em&gt;&lt;/strong&gt;. Because our app runs like a single-page app, we need some kind of a &lt;strong&gt;router&lt;/strong&gt; which navigates to different views depending on changes of the path in the url.&lt;/p&gt;

&lt;h3&gt;2. Models and Collections&lt;/h3&gt;

&lt;p&gt;Our app needs to show some stuff to user. In our case &lt;a href=&quot;https://app.neoscores.com&quot;&gt;neoScores&lt;/a&gt;, we need to show a musical score, a piece of Sheet Music. A musical score is a combination of a title, composer, copyrights, (...), and of course a bunch of staffs, notes, bars, accidentals and a lot, lot more. So we need to be able to bundle all these properties into something we can manage easily, while being flexible to change some of the properties via some user input tools.
All of these properties together are the construction-blocks of our &lt;strong&gt;&quot;Model&quot;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, we need to be able to list up all the scores for one user into his &quot;user&#39;s library&quot;. The user needs to be able to make subsections of his library (like &quot;Playlist&quot; or &quot;Setlists&quot;) or he needs to be able to change some properties of all his scores together at once via some user input tools. A &lt;strong&gt;&quot;Collection&quot;&lt;/strong&gt; is exactly what can do all of this.&lt;/p&gt;

&lt;h3&gt;3. Offline Use&lt;/h3&gt;

&lt;p&gt;Our app is build on top of the concept off &lt;strong&gt;&quot;Offline First&quot;&lt;/strong&gt; which means that LOCAL (in-browser) databases (&lt;em&gt;&quot;indexDB&quot;&lt;/em&gt;,&lt;em&gt;&quot;WebSQL&quot;&lt;/em&gt;,&lt;em&gt;&quot;LocalStorage&quot;&lt;/em&gt;) must be addressed to look for the requested data, in combination with our ONLINE databases to synchronise everything with the cloud, in real time, over multiple accounts, devices and platforms.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Object Binding&lt;/h2&gt;

&lt;p&gt;From the technical point of view, we should be able to create Models (Objects) and Collections (Arrays of Objects) which bind to the UI (the DOM) automatically. The concept of &lt;em&gt;&quot;Object Binding&quot;&lt;/em&gt; is exactly what does all of this. It would be realy ... realy ... convenient when our code simply updates the screen, just when a value of a property of one of our models has been changed.&lt;/p&gt;

&lt;p&gt;So, when somewhere in our code, the value of the title of our score is changed ...&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;My new title&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;... the screen (our view) updates itselves with exactly &lt;em&gt;that&lt;/em&gt; string that our variable (score.title) just has been given.&lt;/p&gt;

&lt;p&gt;To do just that, a lot needs to be done:
- you (as the developer) decide that at some point the value of a variable needs to be changed to &#39;My new title&#39;. (eg. when the database-request gives a response whith some new data)
- an event needs to be triggerd to tell your code &quot;HEY, YOUR VARIABLE (score.title) HAS BEEN CHANGED&quot;
- some other code needs to be listening to this &quot;change-event&quot;
- when this &quot;other code&quot; picks up this event-trigger which says &lt;em&gt;something has been changed&lt;/em&gt;, it needs to update the browsers &lt;em&gt;DOM&lt;/em&gt; with the new value.&lt;/p&gt;

&lt;h2&gt;Getters and Setters&lt;/h2&gt;

&lt;p&gt;Look closely at the code-example above... it just says:&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// example for an Ampersand-Model&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;My new title&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;THAT&#39;S IT!!!! You don&#39;t need to learn some new syntax invented by the creator of some framework. So ..., how the hell are all the events I just talked about invoked???&lt;/p&gt;

&lt;p&gt;Ampersand.js does that for you using javascript getters and setters.
When you (being the developer) define your model (our score)...&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;extend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;string&#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;... Ampersand.js will make a getter and a setter from the property &#39;title&#39;.
Basically as follows:&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// dummy-code&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;constructionOfMyScoreModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,{&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// run some magical code&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// run some magical code&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// YIELDING CHANGE EVENTS happens here&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Next thing you need to do is to set up some &lt;em&gt;javascript&lt;/em&gt; which listens to the events being triggerd from &quot;setting&quot; the value of our &quot;title&quot;-property.
Ampersand.js gives us &lt;strong&gt;&lt;em&gt;ampersand-views&lt;/em&gt;&lt;/strong&gt; to do just that, a little micro-framework which binds the events from model-properties to the DOM.&lt;/p&gt;

&lt;h2&gt;What about Object.observe?&lt;/h2&gt;

&lt;p&gt;In future, the &lt;em&gt;vanilla javascript&lt;/em&gt; feature &quot;Object.observe&quot; is exactly what does all of this (and more), and it will be supported natively in all major browsers. But... the syntax of Object.observe is quit complex to use in a big project. You&#39;ll probably feel the need for some sort of framework to be written arround Object.observe. Ampersand.js does it in an easy way and probably (hopefully) will soon serve as a &lt;em&gt;polyfill&lt;/em&gt; whenever your browser supports it.&lt;/p&gt;

&lt;h2&gt;Ampersand.js vs Backbone&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://backbonejs.org/&quot;&gt;Backbone&lt;/a&gt; is a bulky framework which includes (kind of) everything you will ever need (including &lt;a href=&quot;http://underscorejs.org/&quot;&gt;Underscore.js&lt;/a&gt; and &lt;a href=&quot;http://jquery.com/&quot;&gt;JQuery&lt;/a&gt;). Backbone also has it&#39;s own syntax which doesn&#39;t feel naturally if you only need to update the value of some property&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Backbone&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;My new title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Ampersand.js =)&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;My new title&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Ampersand.js separates everything in little micro-frameworks which you can require:
- individually,
- whenever you need them,
- independantly from each other,
- independantly from other frameworks,
- mixed together with other frameworks,
- ...&lt;/p&gt;

&lt;p&gt;... so you end up with a build-file which includes ONLY the code you actually use!!!
And best of all: Ampersand.js mimics Object Binding by using getters and setters behind the screens.&lt;/p&gt;

&lt;blockquote&gt;&lt;h2&gt;TL;DR&lt;/h2&gt;

&lt;p&gt;When you start building a new project, a lot of the time you begin to scafold multiple (micro-) frameworks together to end up with a lot of custom scripts to bind one and another together. This often leads to your own bootstrapping-code which more and more becomes to grow and start to look as &lt;strong&gt;your own framework&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If this sounds familiar, have a look at Ampersand.js.
It&#39;s:
- Lightweight
- Performant
- Easy to learn
- Selfexplenatory
- Independant but compatible with any other framework
- Opensource and easily accessible to start your own contribution&lt;/p&gt;

&lt;p&gt;Ampersand.js gives you the standard concepts of other big frameworks like Angular or Backbone (&lt;em&gt;Models&lt;/em&gt;, &lt;em&gt;Collections&lt;/em&gt; and &lt;em&gt;Views&lt;/em&gt;), but it&#39;s all conceived as a combination of micro-frameworks. In other words, you only need to require just that little bit of code you actually use, without having to include a bulky, fully fledged, big ass framework, filled with features you&#39;ll never use.
On top of that, the code you write with Ampersand.js looks and feels naturally without having you to learn framework-specific syntax.&lt;/p&gt;&lt;/blockquote&gt;

&lt;h2&gt;Recommended reading&lt;/h2&gt;

&lt;p&gt;If you like a quick start for Ampersand.js, you can read the blog of &lt;a href=&quot;http://silvdb.github.io/2015/04/20/ampersand-js-in-a-nutshell/&quot;&gt;Ampersand.js in a nutshell&lt;/a&gt; by community member (and my colleague/employee), &lt;a href=&quot;https://twitter.com/Silvdb&quot;&gt;Silke Van den Broeck&lt;/a&gt;.
If you like to read more about &quot;Why you should use Ampersand.js&quot;, read on with &lt;a href=&quot;https://blog.andyet.com/2014/06/25/introducing-ampersand-js&quot;&gt;Introducing Ampersand.js&lt;/a&gt; by a member of &lt;a href=&quot;https://andyet.com/&quot;&gt;&amp;amp;Yet&lt;/a&gt; and co-creator of Ampersand.js &lt;a href=&quot;http://andyet.com/team/henrik&quot;&gt;Henrik Joreteg&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Sun, 12 Jul 2015 00:00:00 +0200</pubDate>
				<link>/2015/07/12/When-and-why-to-use-AmpersandJS/</link>
				<guid isPermaLink="true">/2015/07/12/When-and-why-to-use-AmpersandJS/</guid>
			</item>
		
			<item>
				<title>Performance of Prototyping in Javascript</title>
        <description>&lt;p&gt;The post upnext might be obvious, we had our &quot;DUH&quot;-moments ourselves too, but here is something that can keep you from a lot of performance-issues...&lt;/p&gt;

&lt;h2&gt;Performance issues???&lt;/h2&gt;

&lt;p&gt;Imagine you&#39;re writing code where you have a lot of things, each represented by a javascript object, all having the same behaviour but with different property-values.
Of course you should make a class-object of it, and instantiate it over and over again.&lt;/p&gt;

&lt;p&gt;There are multiple ways to do this, but we recently discovered that &lt;em&gt;how&lt;/em&gt; you do this, can make a &lt;strong&gt;HUGE&lt;/strong&gt; difference. Just to mention, at neoScores, we reduced the time to calculate a full-blown orchestral score (comparable with a Mahler Symphony) from &lt;strong&gt;10 seconds per page&lt;/strong&gt;, to only &lt;strong&gt;60 milliseconds(!!!) per page&lt;/strong&gt;.&lt;/p&gt;

&lt;h2&gt;10 seconds vs 60 milliseconds!? What did we do (wrong)?&lt;/h2&gt;

&lt;p&gt;We used to make a class-object, with a lot of properties and methods, like this:&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define our Thingy CLASS-Object&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// lots and lots more methods&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;And we Instantiate one new Thingy-Object for each of our requested thingies&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;allOurThingies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;thingies&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Easy..., yes?
Well... Imagine we have a million thingies and we measure the time to run through our &lt;em&gt;&quot;for-loop&quot;&lt;/em&gt;. That actually does take some time.
Let&#39;s think a moment about this. Every instance of each one of our thingies, allocates some space available in our memory, so it can store all variables AND methods to run. Keep in mind that every method you declared inside your Class Object, also needs to allocate some memory space.&lt;/p&gt;

&lt;h2&gt;So, how are we doing things now?&lt;/h2&gt;

&lt;p&gt;We only need to define a Class Object with the bare minimum we need&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Define our minimal Thingy CLASS-Object&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// make sure we already preserve the memory, needed for an integer, for this property&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;And we add our methods, but now we use &lt;strong&gt;prototyping&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;Instantiate &lt;em&gt;that&lt;/em&gt; for a million times and you&#39;ll see we have a very, VERY, much cheaper script than we used to have. Check this &lt;a href=&quot;http://jsperf.com/prototyping-classobjects&quot;&gt;jsperf&lt;/a&gt;
So, yes, we needed to &quot;refactor&quot; all our code to remove the inner methods of each of our Class Objects, and transform these methods into prototype-functions. FYI: this took us more or less just one week.&lt;/p&gt;

&lt;h2&gt;Any caveats?&lt;/h2&gt;

&lt;p&gt;Yes... There are caveats. Like Douglas Crockford likes to call it in a beautifull wording: &lt;em&gt;&quot;Privileged Functions&quot;&lt;/em&gt; ... are not possible using this simple implementation of prototyping. &quot;Privileged functions&quot; is the reason why we used to work with the first method I described, we wanted &lt;em&gt;private vars&lt;/em&gt; (or as close as we can get to this in the javascript-world).
When you instantiate a function in javascript, it gets it&#39;s own new &quot;scope&quot; which means that a new variable in this new scope will not be known outside of this scope. That&#39;s why you can call it a &quot;private var&quot;.&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;props&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello private world&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;hello public world&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -&amp;gt; &#39;hello public world&#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Thingy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;speak&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -&amp;gt; undefined&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// -&amp;gt; &#39;hello public world&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;This all gets realy interesting when you start combining this with getters and setters!!!
You say what!? That&#39;s for my next blog...&lt;/p&gt;

&lt;p&gt;Meanwhile, enjoy reading:&lt;br/&gt;
&lt;a href=&quot;http://javascript.crockford.com/private.html&quot;&gt;http://javascript.crockford.com/private.html&lt;/a&gt;
&lt;a href=&quot;http://javascript.crockford.com/prototypal.html&quot;&gt;http://javascript.crockford.com/prototypal.html&lt;/a&gt;&lt;/p&gt;
</description>
				<pubDate>Wed, 22 Apr 2015 00:00:00 +0200</pubDate>
				<link>/2015/04/22/performance-of-prototyping-in-javascrip/</link>
				<guid isPermaLink="true">/2015/04/22/performance-of-prototyping-in-javascrip/</guid>
			</item>
		
			<item>
				<title>It&#39;s time to start blogging</title>
        <description>&lt;p&gt;Hi there,&lt;/p&gt;

&lt;p&gt;It&#39;s time to start blogging about the technical decisions, issues and problems we constantly overcome while building our beloved neoScores WebApp.&lt;/p&gt;

&lt;blockquote&gt;&lt;p&gt;&lt;strong&gt;neoScores&lt;/strong&gt; is one of those companies betting on the standards of the internet. Plain ol&#39; HTML, CSS and Javascript. We strongly believe in the potential and philosophy of the &lt;em&gt;openness&lt;/em&gt; of the internet:
 - everyone can use it,
 - nobody is controlling it,
 - it&#39;s continuously evolving,
 - browsers are auto-updating,
 - offline use is perfectly possible,
 - these days, it&#39;s available on everything with a screen&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;The gap between &quot;Native apps&quot; and &quot;Web apps&quot; is gone! Our friends at &lt;a href=&quot;https://andyet.com/&quot;&gt;&amp;amp;yet&lt;/a&gt; are evangelising it as &lt;a href=&quot;http://blog.andyet.com/2015/01/22/native-web-apps#native-web-apps&quot;&gt;&quot;Native Web Apps&quot; (http://blog.andyet.com)&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Javascript&lt;/h2&gt;

&lt;p&gt;I&#39;m starting this blog because I think I can share a lot of interesting javascript-knowledge about
 - browser performance,
 - the internet ... &quot;offline&quot;
 - webcomponents
 - cross-[device|OS|browser]-related &quot;bugs&quot; we fixed,
 - the frameworks we use (&lt;a href=&quot;http://vanilla-js.com/&quot;&gt;Vanilla JS&lt;/a&gt;, &lt;a href=&quot;http://ampersandjs.com/&quot;&gt;Ampersand.js&lt;/a&gt;, &lt;a href=&quot;http://paperjs.org/&quot;&gt;Paper.js&lt;/a&gt;, &lt;a href=&quot;https://www.polymer-project.org&quot;&gt;Polymer&lt;/a&gt;),
 - our server-architecture in &lt;a href=&quot;https://nodejs.org/&quot;&gt;Node.JS&lt;/a&gt; on &lt;a href=&quot;http://aws.amazon.com/&quot;&gt;Amazon AWS&lt;/a&gt;
 - and a bit of fun like &lt;a href=&quot;http://aem1k.com&quot;&gt;Minified JavaScript Craziness&lt;/a&gt; by &lt;em&gt;Martin Kleppe&lt;/em&gt; aka &lt;a href=&quot;http://twitter.com/aemkei&quot;&gt;@aemkei&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][[]])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[][[]])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]])[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+!+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]]]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ()+[]!&lt;/span&gt;
  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;javascript:eval((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])&quot;&gt;[Try this]&lt;/a&gt;&lt;/p&gt;

&lt;h2&gt;Digital Sheet Music Engraving&lt;/h2&gt;

&lt;p&gt;Another thing I might talk about is our vision on the details of Digital Sheet Music engraving and how we deal with the difficulties of the available file-formats for sheet music.&lt;/p&gt;

&lt;p&gt;Thanks to neoScores, we can embed Sheet Music snippets into any other website. Just by adding 2 lines of HTML to you page:&lt;/p&gt;

&lt;p&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;data-src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;2e2dea609a638e7a23689945db263ed9&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;neoscores-engraver&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;https://app.neoscores.com/api/1/plugin/neoscores.js&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;&lt;/p&gt;

&lt;p&gt;... which comes in handy to show the neoScores-variations of the examples Daniel Spreadbury is describing on his blog &lt;a href=&quot;http://blog.steinberg.net/&quot;&gt;Making notes&lt;/a&gt;. Here&#39;s one to start with ;-)&lt;/p&gt;

&lt;div data-src=&quot;2e2dea609a638e7a23689945db263ed9&quot; class=&quot;neoscores-engraver&quot; width=&quot;100%&quot; height=&quot;320px&quot; data-scale=&quot;1.2&quot;&gt;&lt;/div&gt;


&lt;p&gt;&lt;/p&gt;&lt;/p&gt;

&lt;script&gt;
  (function(i,s,o,g,r,a,m){i[&#39;neoScoresPluginObject&#39;]=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,&#39;script&#39;,&#39;https://app.neoscores.com/js/neoscores.plugin.js&#39;,&#39;nsPlugin&#39;);
  nsPlugin.token=&#39;bhamblok&#39;;  // Replace &#39;xxx&#39; with the token we have provided you.
&lt;/script&gt;


&lt;p&gt;&lt;br /&gt;
Cheers,&lt;/p&gt;
</description>
				<pubDate>Sun, 12 Apr 2015 00:00:00 +0200</pubDate>
				<link>/2015/04/12/welcome/</link>
				<guid isPermaLink="true">/2015/04/12/welcome/</guid>
			</item>
		
	</channel>
</rss>
