<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title><![CDATA[bhamblok.io]]></title>
    <link>http://bhamblok.io/</link>
    <atom:link href="/rss.xml" rel="self" type="application/rss+xml"/>
    <description><![CDATA[Bob Hamblok's Blog]]></description>
    <pubDate>Wed, 22 Apr 2015 15:21:58 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title><![CDATA[Performance of Prototyping in Javascript]]></title>
      <link>http://bhamblok.io/2015/04/22/performance-of-prototyping-in-javascript/</link>
      <guid>http://bhamblok.io/2015/04/22/performance-of-prototyping-in-javascript/</guid>
      <pubDate>Wed, 22 Apr 2015 13:06:41 GMT</pubDate>
      <description>
      <![CDATA[<h1 id="Performance_issues_you_say?">Performance issues you say?</h1><p>Imagine you have a lot of things, each represented by a javascript object, all having the same behaviour but with different property-values.<br>Of course you should make a class-object of it, and instantiate it over and over again.</p>
<p>There are multiple ways to do this, but we recently discovered that <em>how</em> you do this, can make a <strong>HUGE</strong> difference. Just to mention, at neoScores, we reduced the time to calculate a full-blown orchestral score (comparable with a Mahler Symphony) from <strong>10 seconds per page</strong>, to only <strong>60 milliseconds(!!!) per page</strong>.<br>]]>
      
      </description>
      <content:encoded><![CDATA[<h1 id="Performance_issues_you_say?">Performance issues you say?</h1><p>Imagine you have a lot of things, each represented by a javascript object, all having the same behaviour but with different property-values.<br>Of course you should make a class-object of it, and instantiate it over and over again.</p>
<p>There are multiple ways to do this, but we recently discovered that <em>how</em> you do this, can make a <strong>HUGE</strong> difference. Just to mention, at neoScores, we reduced the time to calculate a full-blown orchestral score (comparable with a Mahler Symphony) from <strong>10 seconds per page</strong>, to only <strong>60 milliseconds(!!!) per page</strong>.<br><a id="more"></a></p>
<h1 id="10_seconds_vs_60_milliseconds!?_What_did_we_do_wrong?">10 seconds vs 60 milliseconds!? What did we do wrong?</h1><p>We used to make a class-object, with a lot of properties and methods, like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define our Thingy CLASS-Object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thingy</span><span class="params">(props)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">this</span>.add = <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</span><br><span class="line">		i += value;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// lots and lots more methods</span></span><br><span class="line">	<span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And we Instantiate one new Thingy-Object for each of our requested thingies<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;allOurThingies.length; i++) </span><br><span class="line">	<span class="keyword">new</span> Thingy(thingies[i]);</span><br></pre></td></tr></table></figure></p>
<p>Easy…, yes?<br>Well… Imagine we have a million thingies and we measure the time to run through our <em>“for-loop”</em>. That actually does take some time.<br>Let’s think about it. Every intance of each one of our thingy, makes some space available in our available memory to be able to keep all variables and some extra’s to run all of these methods.</p>
<h1 id="So,_how_are_we_doing_things_now?">So, how are we doing things now?</h1><p>We just define a Class Object with the bare minimum we need<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Define our minimal Thingy CLASS-Object</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thingy</span><span class="params">(props)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>._i = <span class="number">0</span>;	<span class="comment">// make sure we already preserve the memory, needed for an integer, for this property</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And we add our methods, but now we use prototyping<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Thingy.prototype.add = <span class="function"><span class="keyword">function</span><span class="params">(value)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>._i += value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Instantiate that for a million times and you’ll see we have a very, VERY, much cheaper script than we used to have. Check this <a href="http://jsperf.com/prototyping-classobjects" target="_blank" rel="external">jsperf</a></p>
<h1 id="Any_caveats?">Any caveats?</h1><p>Yes… There are always caveats. Like Douglas Crockford likes to call it in a beautifull wording: <em>“Privileged Functions”</em> … are not possible using this simple implementation of prototyping. “Privileged functions” is why we used to work with the first method I described, we wanted <em>private vars</em> (or as close as we can get to this in the javascript-world).<br>When you instantiate a function in javascript, it gets it’s own new “scope” which means that a new variable in this new scope will not be known outside of this scope. That’s why you can call it a “private var”.<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Thingy</span><span class="params">(props)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="string">'hello private world'</span>;</span><br><span class="line">	<span class="keyword">this</span>.y = <span class="string">'hello public world'</span>;</span><br><span class="line">&#125;</span><br><span class="line">Thingy.prototype.speak = <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(x); <span class="comment">// -&gt; undefined</span></span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">this</span>.y); <span class="comment">// -&gt; 'hello public world'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> thing = <span class="keyword">new</span> Thingy();</span><br><span class="line">thing.speak();</span><br><span class="line"><span class="comment">// -&gt; undefined</span></span><br><span class="line"><span class="comment">// -&gt; 'hello public world'</span></span><br></pre></td></tr></table></figure></p>
<p>There are techniques to solve this: <a href="http://javascript.crockford.com/private.html" target="_blank" rel="external">http://javascript.crockford.com/private.html</a></p>
<p>And it all gets realy interesting when you start combining this all with getters and setters!!!<br>You say what!? That’s for my next blog…</p>
<p>Meanwhile, enjoy reading:<br><a href="http://javascript.crockford.com/prototypal.html" target="_blank" rel="external">http://javascript.crockford.com/prototypal.html</a></p>
]]></content:encoded>
      <comments>http://bhamblok.io/2015/04/22/performance-of-prototyping-in-javascript/#disqus_comments</comments>
    </item>
    
    <item>
      <title><![CDATA[It's time to start blogging]]></title>
      <link>http://bhamblok.io/2015/04/12/welcome/</link>
      <guid>http://bhamblok.io/2015/04/12/welcome/</guid>
      <pubDate>Sun, 12 Apr 2015 13:52:46 GMT</pubDate>
      <description>
      <![CDATA[<p>Hi there,</p>
<p>It’s time to start blogging about the technical decisions, issues and problems we constantly overcome while building our beloved neoScores WebApp.</p>
<blockquote>
<p><strong>neoScores</strong> is one of those companies betting on the standards of the internet. Plain ol’ HTML, CSS and Javascript. We strongly believe in the potential and philosophy of the <em>openness</em> of the internet:</p>
<ul>
<li>everyone can use it,</li>
<li>nobody is controlling it,</li>
<li>it’s continuously evolving,</li>
<li>browsers are auto-updating,</li>
<li>offline use is perfectly possible,</li>
<li>these days, it’s available on everything with a screen</li>
</ul>
</blockquote>
<p>The gap between “Native apps” and “Web apps” is gone! Our friends at <a href="https://andyet.com/">&amp;yet</a> are evangelising it as <a href="http://blog.andyet.com/2015/01/22/native-web-apps#native-web-apps">“Native Web Apps” (http://blog.andyet.com)</a><br>]]>
      
      </description>
      <content:encoded><![CDATA[<p>Hi there,</p>
<p>It’s time to start blogging about the technical decisions, issues and problems we constantly overcome while building our beloved neoScores WebApp.</p>
<blockquote>
<p><strong>neoScores</strong> is one of those companies betting on the standards of the internet. Plain ol’ HTML, CSS and Javascript. We strongly believe in the potential and philosophy of the <em>openness</em> of the internet:</p>
<ul>
<li>everyone can use it,</li>
<li>nobody is controlling it,</li>
<li>it’s continuously evolving,</li>
<li>browsers are auto-updating,</li>
<li>offline use is perfectly possible,</li>
<li>these days, it’s available on everything with a screen</li>
</ul>
</blockquote>
<p>The gap between “Native apps” and “Web apps” is gone! Our friends at <a href="https://andyet.com/" target="_blank" rel="external">&amp;yet</a> are evangelising it as <a href="http://blog.andyet.com/2015/01/22/native-web-apps#native-web-apps" target="_blank" rel="external">“Native Web Apps” (http://blog.andyet.com)</a><br><a id="more"></a></p>
<h1 id="Javascript">Javascript</h1><p>I’m starting this blog because I think I can share a lot of interesting javascript-knowledge about</p>
<ul>
<li>browser performance,</li>
<li>the internet … “offline”</li>
<li>webcomponents</li>
<li>cross-[device|OS|browser]-related “bugs” we fixed,</li>
<li>the frameworks we use (<a href="http://vanilla-js.com/" target="_blank" rel="external">Vanilla JS</a>, <a href="http://ampersandjs.com/" target="_blank" rel="external">Ampersand.js</a>, <a href="http://paperjs.org/" target="_blank" rel="external">Paper.js</a>, <a href="https://www.polymer-project.org" target="_blank" rel="external">Polymer</a>),</li>
<li>our server-architecture in <a href="https://nodejs.org/" target="_blank" rel="external">Node.JS</a> on <a href="http://aws.amazon.com/" target="_blank" rel="external">Amazon AWS</a></li>
<li><p>and a bit of fun like <a href="http://aem1k.com" target="_blank" rel="external">Minified JavaScript Craziness</a> by <em>Martin Kleppe</em> aka <a href="http://twitter.com/aemkei" target="_blank" rel="external">@aemkei</a></p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])</span><br><span class="line">[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+</span><br><span class="line">[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[</span><br><span class="line">]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(</span><br><span class="line">!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!</span><br><span class="line">+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+[])[+[]</span><br><span class="line">]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!</span><br><span class="line">+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]</span><br><span class="line">+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]] <span class="comment">// ()+[]!</span></span><br></pre></td></tr></table></figure>
<p> <a href="javascript:eval((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[!+[]+!+[]+[+[]]])" target="_blank" rel="external">[Try this]</a></p>
</li>
</ul>
<h1 id="Digital_Sheet_Music_Engraving">Digital Sheet Music Engraving</h1><p>Another thing I might talk about is our vision on the details of Digital Sheet Music engraving and how we deal with the difficulties of the available file-formats for sheet music.</p>
<p>Thanks to neoScores, we can embed Sheet Music snippets into any other website. Just by adding 2 lines of HTML to you page:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">div</span> <span class="attribute">data-src</span>=<span class="value">"d708ae7fe6329ba3c987e275be815748"</span> <span class="attribute">class</span>=<span class="value">"neoscores-engraver"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"https://app.neoscores.com/api/1/plugin/neoscores.js"</span>&gt;</span><span class="javascript"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>… which comes in handy to show the neoScores-variations of the examples Daniel Spreadbury is describing on his blog <a href="http://blog.steinberg.net/" target="_blank" rel="external">Making notes</a>. Here’s one to start with ;-)</p>
<p><div data-src="d708ae7fe6329ba3c987e275be815748" class="neoscores-engraver" width="100%" height="250px" data-scale="1.2" style="margin: 0 !important;"></div></p>
<script type="text/javascript" src="https://app.neoscores.com/api/1/plugin/neoscores.js"></script>

<p><br><br>Cheers,</p>
]]></content:encoded>
      <comments>http://bhamblok.io/2015/04/12/welcome/#disqus_comments</comments>
    </item>
    
  </channel>
</rss>